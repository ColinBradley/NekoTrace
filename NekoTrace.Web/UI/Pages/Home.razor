@page "/"

@using Microsoft.AspNetCore.Components.QuickGrid
@using System.Collections.Immutable

<PageTitle>Traces - NekoTrace</PageTitle>

<div class="page">

	<div style="display: flex; gap: 1em; grid-column: 1/3; padding: 1em;">
		<h1>
			<a href="@this.Navigation.GetUriWithQueryParameter("TraceId", (string?)null)">
				Traces
			</a>
		</h1>
		<div class="inline-controls">
			<label>
				<span>
					Span Color Selector
				</span>
				<input value="@this.EffectiveSpanColorSelector"
					   @onchange="this.SpanColorSelector_Change"
					   list="common-span-attributes-items" />
				<datalist id="common-span-attributes-items">
					@foreach (var spanAttributeKey in this.RootSpanAttributeKeys)
					{
						<option>@spanAttributeKey</option>
					}
				</datalist>
			</label>
			<button id="add-column-option-button"
					popovertarget="add-column-popover">
				Add Column…
			</button>
			<div id="add-column-popover"
				 anchor="add-column-option-button"
				 popover
				 style="position-area: y-end;">
				<form class="controls"
					  @onsubmit="this.AddColumnForm_Submit">
					<label>
						<span>
							Value
						</span>
						<input @bind="this.NewColumnValue"
							   @bind:event="oninput"
							   autofocus
							   list="common-span-attributes-items" />
					</label>
					<button type="submit"
							disabled="@(string.IsNullOrWhiteSpace(this.NewColumnValue))">
						Add
					</button>
				</form>
			</div>
		</div>
	</div>

	<div class="traces">
		<QuickGrid Items="this.FilteredTraces"
				   Virtualize="true"
				   Theme="dark"
				   ItemKey="t => t.Id"
				   ItemSize="28"
				   style="@this.TracesGridStyle">

			<TemplateColumn Title="Start Time"
							SortBy="this.TraceStartGridSort"
							Sortable="true"
							IsDefaultSortColumn="true"
							InitialSortDirection="SortDirection.Descending">
				<div>
					@context.Start.ToString("HH:mm:ss.fff")
				</div>
			</TemplateColumn>

			<TemplateColumn Title="Name" Align="Align.Right">
				<ColumnOptions>
					<div class="trace-names">
						@foreach (var nameCount in this.TraceNamesWithCounts)
						{
							string toggleHref;
							bool isIncluded;
							string queryParameterName;
							ImmutableHashSet<string> newItems;
							if (this.ExclusiveTraceNames is null)
							{
								queryParameterName = nameof(this.IgnoredTraceNames);
								isIncluded = !this.IgnoredTraceNamesSet.Contains(nameCount.Name);
								if (isIncluded)
								{
									newItems = this.IgnoredTraceNamesSet.Add(nameCount.Name);
								}
								else
								{
									newItems = this.IgnoredTraceNamesSet.Remove(nameCount.Name);
								}
							}
							else
							{
								queryParameterName = nameof(this.ExclusiveTraceNames);
								isIncluded = this.ExclusiveTraceNamesSet.Contains(nameCount.Name);

								if (isIncluded)
								{
									newItems = this.ExclusiveTraceNamesSet.Remove(nameCount.Name);
								}
								else
								{
									newItems = this.ExclusiveTraceNamesSet.Add(nameCount.Name);
								}
							}

							toggleHref = this.Navigation.GetUriWithQueryParameter(queryParameterName, newItems.Count is 0 ? null : string.Join('|', newItems));

							<div class="trace-name-toggle @(isIncluded ? "included" : "excluded")">
								<a href="@toggleHref" class="toggler">
									@(isIncluded ? "-" : "+")
								</a>
								<a href="@this.Navigation.GetUriWithQueryParameters(new Dictionary<string, object?>([new(nameof(this.IgnoredTraceNames), null), new(nameof(this.ExclusiveTraceNames), nameCount.Name)]))">
									@nameCount.Name
								</a>
								<span class="count">
									@nameCount.Count
								</span>
							</div>
						}
					</div>
				</ColumnOptions>

				<ChildContent>
					<NavLink href="@this.Navigation.GetUriWithQueryParameters(new Dictionary<string, object?>([new(nameof(this.TraceId), context.Id), new(nameof(TraceViewComponent.SelectedSpanId), null)]))"
							 title="@(context.RootSpan?.Name ?? context.Id)">
						@(context.RootSpan?.Name ?? context.Id)
					</NavLink>
				</ChildContent>
			</TemplateColumn>

			<TemplateColumn Title="Has Error"
							SortBy="this.TraceHasErrorGridSort"
							Sortable="true"
							Align="Align.Right">
				<ColumnOptions>
					<div class="has-error-options">
						<label>
							<input type="checkbox" @onchange="() => this.ToggleHasError(true)" checked="@(this.HasError is true)" />
							<span>
								True
							</span>
						</label>
						<label>
							<input type="checkbox" @onchange="() => this.ToggleHasError(false)" checked="@(this.HasError is false)" />
							<span>
								False
							</span>
						</label>
					</div>
				</ColumnOptions>

				<ChildContent>
					@if (context.HasError)
					{
						<span class="trace-error-true">
							true
						</span>
					}
					else
					{
						<span class="trace-error-false">
							false
						</span>
					}
				</ChildContent>
			</TemplateColumn>

			<PropertyColumn Title="Spans"
							Property="@(t => t.Spans.Count)"
							Sortable="true"
							Align="Align.Right">
				<ColumnOptions>
					<div class="controls">
						<label>
							<span>
								Min
							</span>
							<input type="number"
								   value="@this.SpansMinimum"
								   min="2"
								   @onchange="this.SpansMinimum_Change" />
						</label>
					</div>
				</ColumnOptions>
			</PropertyColumn>

			<PropertyColumn Title="Duration"
							Property="@(t => t.Duration)"
							Sortable="true"
							Align="Align.Right">
				<ColumnOptions>
					<div class="controls">
						<label>
							<span>
								Min (seconds)
							</span>
							<input type="number"
								   value="@this.DurationMinimum"
								   min="0"
								   step="0.01"
								   @onchange="this.DurationMinimum_Change" />
						</label>
						<label>
							<span>
								Max (seconds)
							</span>
							<input type="number"
								   value="@this.DurationMaximum"
								   min="0.0001"
								   step="0.1"
								   @onchange="this.DurationMaximum_Change" />
						</label>
					</div>
				</ColumnOptions>
			</PropertyColumn>

			@foreach (var customColumn in this.EffectiveCustomColumns)
			{
				<PropertyColumn Title="@customColumn"
								Property="@(t => t.TryGetRootSpanAttribute(customColumn))"
								Sortable="true"
								Align="Align.Right">
					<ColumnOptions>
						<div class="controls">
							<button @onclick="() => this.RemoveColumnButton_Click(customColumn)">
								Remove
							</button>
						</div>
					</ColumnOptions>
				</PropertyColumn>
			}
		</QuickGrid>
	</div>

	<!-- Note: Ideally, this is conditionally rendered, but https://github.com/dotnet/aspnetcore/issues/57746 causes us to not dynamically use components with [SupplyParameterFromQuery] -->
	<TraceViewComponent TraceId="@this.TraceId"
						SpanColorSelector="@this.SpanColorSelector"
						IsSmallMode="true" />
</div>
