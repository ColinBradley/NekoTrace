@page "/"

@using Microsoft.AspNetCore.Components.QuickGrid

<PageTitle>Traces - NekoTrace</PageTitle>

<div class="page">

    <div style="display: flex; gap: 1em; grid-column: 1/3; padding: 1em;">
        <h1>
            <a href="@this.Navigation.GetUriWithQueryParameter("TraceId", string.Empty)">
                Traces
            </a>
        </h1>
        <div>
            <label>
                <span>
                    Trace Color Selector
                </span>
                <input type="text"
                       value="@this.EffectiveSpanColorSelector"
                       @onchange="this.SpanColorSelector_Change"
                       list="common-span-attributes-items" />
                <datalist id="common-span-attributes-items">
                    @foreach (var spanAttributeKey in this.RootSpanAttributeKeys)
                    {
                        <option>@spanAttributeKey</option>
                    }
                </datalist>
            </label>
        </div>
    </div>

    <div class="traces">
        <QuickGrid Items="this.FilteredTraces"
                   Virtualize="true"
                   Theme="dark"
                   ItemKey="t => t.Id"
                   ItemSize="28">

            <TemplateColumn Title="Start Time"
                            SortBy="this.TraceStartGridSort"
                            Sortable="true"
                            IsDefaultSortColumn="true"
                            InitialSortDirection="SortDirection.Descending">
                <div>
                    @context.Start.ToString("HH:mm:ss.fff")
                </div>
            </TemplateColumn>

            <TemplateColumn Title="Name" Align="Align.Right">
                <ColumnOptions>
                    <div class="trace-names">
                        @foreach (var name in this.TraceNames)
                        {
                            <label>
                                <input type="checkbox" @onchange="() => this.ToggleTraceNameFilter(name)" checked="@(!this.IgnoredTraceNamesSet.Contains(name))" />
                                <span>
                                    @name
                                </span>
                            </label>
                        }
                    </div>
                </ColumnOptions>

                <ChildContent>
                    <NavLink href="@this.Navigation.GetUriWithQueryParameter("TraceId", context.Id)">
                        @(context.RootSpan?.Name ?? context.Id)
                    </NavLink>
                </ChildContent>
            </TemplateColumn>

            <TemplateColumn Title="Has Error"
                            SortBy="this.TraceHasErrorGridSort"
                            Sortable="true"
                            Align="Align.Right">
                <ColumnOptions>
                    <div class="has-error-options">
                        <label>
                            <input type="checkbox" @onchange="() => this.ToggleHasError(true)" checked="@(this.HasError is true)" />
                            <span>
                                True
                            </span>
                        </label>
                        <label>
                            <input type="checkbox" @onchange="() => this.ToggleHasError(false)" checked="@(this.HasError is false)" />
                            <span>
                                False
                            </span>
                        </label>
                    </div>
                </ColumnOptions>

                <ChildContent>
                    @if (context.HasError)
                    {
                        <span class="trace-error-true">
                            true
                        </span>
                    }
                    else
                    {
                        <span class="trace-error-false">
                            false
                        </span>
                    }
                </ChildContent>
            </TemplateColumn>

            <PropertyColumn Title="Spans"
                            Property="@(t => t.Spans.Count)"
                            Sortable="true"
                            Align="Align.Right">
                <ColumnOptions>
                    <div class="inputs">
                        <label>
                            <span>
                                Min
                            </span>
                            <input type="number"
                                   value="@this.SpansMinimum"
                                   min="2"
                                   @onchange="this.SpansMinimum_Change" />
                        </label>
                    </div>
                </ColumnOptions>
            </PropertyColumn>

            <PropertyColumn Title="Duration"
                            Property="@(t => t.Duration)"
                            Sortable="true"
                            Align="Align.Right">
                <ColumnOptions>
                    <div class="inputs">
                        <label>
                            <span>
                                Min (seconds)
                            </span>
                            <input type="number"
                                   value="@this.DurationMinimum"
                                   min="0"
                                   step="0.01"
                                   @onchange="this.DurationMinimum_Change" />
                        </label>
                        <label>
                            <span>
                                Max (seconds)
                            </span>
                            <input type="number"
                                   value="@this.DurationMaximum"
                                   min="0.0001"
                                   step="0.1"
                                   @onchange="this.DurationMaximum_Change" />
                        </label>
                    </div>
                </ColumnOptions>
            </PropertyColumn>
        </QuickGrid>
    </div>

    @{
        var selectedTrace = this.SelectedTrace;
        if (selectedTrace is not null)
        {
            <div class="trace">
                <label class="inline">
                    <input type="checkbox" checked="@(this.GroupSpans ?? true)" @onchange="this.GroupSpans_Change" />
                    <span>
                        Group Spans
                    </span>
                </label>

                <canvas @ref="this.TraceFlameCanvas"
                        width="1000"
                        height="700" />

                <div style="overflow:auto; width: 1000px;">
                    @if (this.SelectedSpan is not null)
                    {
                        <dl class="span-info">
                            <dt>Name</dt>
                            <dd class="name">
                                @this.SelectedSpan.Name
                            </dd>
                            <dt>Start</dt>
                            <dd class="duration">
                                @(this.SelectedSpan.StartTime - selectedTrace.Start)
                            </dd>
                            <dt>Duration</dt>
                            <dd class="duration">
                                @(this.SelectedSpan.EndTime - this.SelectedSpan.StartTime)
                            </dd>
                            <dt>Kind</dt>
                            <dd class="kind">
                                @this.SelectedSpan.Kind
                            </dd>
                            <dt>Parent</dt>
                            <dd class="parent">
                                @(selectedTrace.Spans.FirstOrDefault(s => s.Id == this.SelectedSpan.ParentSpanId)?.Name)
                            </dd>
                            @if (!string.IsNullOrEmpty(this.SelectedSpan.StatusMessage))
                            {
                                <dt>Message</dt>
                                <dd class="status-message">
                                    @this.SelectedSpan.StatusMessage
                                </dd>
                            }
                            @foreach (var spanAttribute in this.SelectedSpan.Attributes.OrderBy(e => e.Key))
                            {
                                <dt>
                                    @spanAttribute.Key
                                </dt>
                                <dd class="value" title="@spanAttribute.Value">
                                    @spanAttribute.Value
                                </dd>
                            }
                        </dl>

                        @if (this.SelectedSpan.Events.Length > 0)
                        {
                            <h2>
                                Events
                            </h2>
                            <div class="events">
                                @foreach (var spanEvent in this.SelectedSpan.Events)
                                {
                                    <dl class="event span-info">
                                        <dt>Name</dt>
                                        <dd class="name">
                                            @spanEvent.Name
                                        </dd>
                                        <dt>Time</dt>
                                        <dd class="time">
                                            @spanEvent.Time
                                        </dd>
                                        @foreach (var eventAttribute in spanEvent.Attributes)
                                        {
                                            <dt class="key">
                                                @eventAttribute.Key
                                            </dt>
                                            <dd class="value" title="@eventAttribute.Value">
                                                @eventAttribute.Value
                                            </dd>
                                        }
                                    </dl>
                                }
                            </div>
                        }
                    }
                </div>
            </div>
        }
    }
</div>
